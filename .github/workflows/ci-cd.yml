# 워크플로우의 이름을 정의합니다.
name: CI/CD Pipeline

# 워크플로우가 실행될 조건을 정의합니다.
on:
  push:
    branches: [main]  # main 브랜치에 push가 발생했을 때 실행

# 실행할 작업들을 정의합니다.
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2  # GitHub 저장소의 코드를 워크플로우 환경으로 가져옵니다.

      # 2. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1  # 다중 플랫폼 빌드를 지원하는 Docker Buildx를 설정합니다.

      # 3. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .  # Dockerfile이 있는 현재 디렉토리를 빌드 컨텍스트로 사용
          push: true  # 빌드 후 이미지를 레지스트리에 푸시
          tags: minthug/sniff-step:${{ github.sha }}  # 이미지 태그 설정 (커밋 SHA 사용)

      # 4. 서버에 배포
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}  # 배포할 서버의 호스트 주소
          username: ${{ secrets.SERVER_USER }}  # SSH 접속 사용자 이름
          password: ${{ secrets.SERVER_PASSWORD }}  # SSH 접속 비밀번호
          port: ${{ secrets.SERVER_PORT }}  # SSH 포트
          script: |
            docker pull minthug/sniff-step:${{ github.sha }}
            docker stop sniff-step || true
            docker rm sniff-step || true
            
            docker run -d --name backend -p :8081:8081 \
            -e SPRING_PROFILES_ACTIVE=prod \ 
            minthug/sniff-step:${{ github.sha }}
            
            docker exec -i nginx nginx -s reload
